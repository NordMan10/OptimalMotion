Проектирование:
* Выделить метод считывания исходных данных (при изменении формата исходных данных нужно будет менять только один метод);




// ! — элемент нужно задать при создании объекта

Основные сущности: 
* Id ВС; 
* ВС; +
* Взлетающий ВС; +
* Садящийся ВС; +
* Спец площадка; +
* ВПП; +
* Контроллер реализуемости планового момента выхода; +
* Генератор ВС;
* Момент ВС; +
* Интервал ВС; +
* Перечисление типов моментов; +
* Перечисление типов интервалов; +
* Момент; +
* Интервал; +
* Элементы GUI: таблица (пока что таблица, дальше видно будет); +
* Не явная общая сущность (что-то вроде организующего всю работу класса); 


Содержание сущностей:

ВС: (ИНТЕРФЕЙС)

Данные:
* Id;
* Моменты;
* Интервалы;

Методы:
* Возврат интервала занимания {ВПП} (И.1);


=================================================================================

Взлетающий ВС: (наследование от ВС)

Данные:
* {ВПП};
* {Спец площадка}
* Флаг необходимости обработки; !
* максимум ожидания обработки; !
* константный интервал для безопасного слияния; !
* максимум ожидания на предварительном старте; !

Методы:
* Расчет момента выхода на ПРСТ: (2.1, 3.1)
	1) Если обработка не нужна => вызываем метод (1.1), прибавляем время движения от стоянки до ПРСТ. Возвращаем результат;
	2) Если обработка нужна => вызываем метод (1.2), прибавляем время движения от стоянки до спец площадки, прибавляем время обработки и время движения от спец площадки до ПРСТ. Возвращаем сумму;

* Расчет интервала ожидания на ПРСТ: (1.1)
	1) Вызываем метод {ВПП} И.1; 
	2) Возвращаем результат;

* Расчет суммы интервала ожидания обработки и интервала для безопасного слияния: (1.2)
	1) Вызываем метод {Спец площадки} И.1;
	2) Возвращаем результат;

* Расчет момента выхода на исполнительный старт: (2)
	1) Вызываем метод (2.1) если он еще не был вызван;
	2) Прибавляем к полученному/известному моменту выхода на ПРСТ интервал времени руления на исп. старт и возвращаем сумму;

* Расчет момента взлета (покидания ВПП): (3)
	1) Вызываем метод (3.1) если он еще не был вызван;
	2) Прибавляем к полученному/известному моменту выхода на ПРСТ интервал времени руления на исп. старт и интервал времени взлета. Возвращаем сумму;

* Расчет момента запуска двигателей: (1) !!!!!!!!!!!!!!!!!!!!!!!!!!
	1) Если обработка не нужна => вызываем метод (1.1), прибавляем момент появления и возвращаем сумму;
	2) Если обработка нужна => вызываем метод (1.2), прибавляем прибавляем момент появления и возвращаем сумму;

* Возврат момента запуска двигателей: (ИНТЕРФЕЙС) (И.1)
	1) Вызываем метод (1);
	2) Сохраняем данные этого метода в нужном формате и возвращаем;

* Возврат интервала занимания {ВПП} (уже с учетом задержек, чтобы записать в {ВПП}): (ИНТЕРФЕЙС) (И.2)
	1) Вызываем метод (2);
	2) Вызываем метод (3);
	3) Формируем интервал и возвращаем его;

* Возврат интервала занимания {Спец площадки} (уже с учетом задержек, чтобы записать в {Спец площадку}): (ИНТЕРФЕЙС) (И.3)
	0) Если обработка не нужна — выбрасываем исключение с соответствующим сообщением;
	1) Вызываем метод (1.2) и прибавляем время движения от стоянки до спец. площадки. Получили момент прибытия;
	2) К полученному моменту прибавляем время обработки. Получили момент освобождения;
	3) Формируем интервал и возвращаем его;


=================================================================================

Садящийся ВС: (наследование от ВС)

Данные:
* Id;
* Моменты;
* Интервалы; 

Методы:

* Возврат интервала занимания {ВПП}: (ИНТЕРФЕЙС) (И.1)
	1) Момент посадки нам задан;
	2) Получаем момент освобождения ВПП, прибавив к моменту посадки интервал пробега по ВПП;
	3) Создаем интервал занимания ВПП;
	3) Возвращаем полученный интервал;

=================================================================================

Перечисление типов моментов:

Типы:
* появление; !
* плановое прибытие на предварительный старт; !
* отправление (запуск двигателей);
* прибытие на предварительный старт;
* прибытие на исполнительный старт;
* покидание ВПП (взлет);


=================================================================================

Перечисление типов интервалов:

Типы:
* движение от стоянки на предварительный старт; ! (мб не задано)
* движение от стоянки до спец площадки; !
* ожидание обработки; 
* ожидание безопасного слияния;
* обработка; !
* движение от площадки к предварительному старту; !
* ожидание на предварительном старте; 
* руление на исполнительный старт; !
* взлет; !


=================================================================================

Момент:
Данные:
* тип;
* временное значение, мс;

Методы:
* Оператор сложения момента и интервала и наоборот;


=================================================================================

Интервал:
Данные:
* тип;
* начальный момент;
* конечный момент;

Методы:
* Получить значение интервала в мс между своими моментами;
* Оператор сложения интервалов;
* Оператор сложения интервала и момента и наоборот;


=================================================================================

Спец площадка: (зона с последовательным доступом)

Данные:
* Id;
* интервалы занимания площадки: (есть от ЗПД);


Методы:

* Метод расчета интервала для безопасного слияния: (1)
	1) Получаем два интервала. 
	2) Вычисляем модуль разности между начальными моментами этих интервалов;
	3) Если полученная разность >= интервалу для безопасного слияния => возвращаем ноль;
	4) Если нет => возвращаем интервал для безопасного слияния = константное значение
		интервала для безопасного слияния - рассчитанная разность;

* Метод выделения интервала в конце списка (3):
	1) Получаем интервал обратившегося судна;
	2) Сохраняем интервал ожидания обработки = момент покидания площадки последним записанным судном 
	минус момент прибытия (без задержки) обратившегося судна;
	3) Вызываем метод (1) и передаем ему последний записанный интервал и текущий интервал; Сохраняем значение;
	4) Возвращаем интервал ожидания обработки и интервал для безопасного слияния;

* Метод, возвращающий задержку для ожидания обработки и для безопасного слияния (в кортеже): (ИНТЕРФЕЙС) (И.1)
	1) Создаем интервал занимания обратившегося судна из переданных им данных;
	2) Получаем ключи левого и правого интервала для словаря интервалов (метод (1) ЗПД) относительно созданного инетрвала;
	3) Проверяем пересечение созданного интервала с левым и правым (метод (2) ЗПД):
		3.1) Если пересечений нет => 
			3.1.1) Вызываем метод (1) для текущего и левого и текущего и правого интервалов;
			3.1.2) Если метод (1) в обоих случаях вернул 0 => возвращаем два нуля;
			3.1.3) Если нет => сохраняем полученное число и определяем, с каким интервалом, левым или правым, 
			идет конфликт (уже сделано в пункте 3.1.1):
				3.1.3.1) Если с правым => возвращаем значение метода (3); 
				3.1.3.2) Если с левым => сдвигаем интервал ВС вправо на сохраненное в пункте 3.1.3 значение ожидания (метод (2)). 
			3.1.4) Снова проверяем наличие безопасных интервалов между моментами прибытия (метод (1)). 
			Вызываем метод (1) для текущего и левого и текущего и правого интервалов:
				3.1.4.1) Если метод (1) в обоих случаях вернул 0 => проверяем пересечение интервалов (метод (2) ЗПД):
					3.1.4.1.1) Если есть пересечение => возвращаем значение метода (3);
					3.1.4.1.2) Если нет => возвращаем интервал ожидания обработки = 0 и интервал для безопасного слияния = 
					сохраненному в пункте 3.1.3 значению ожидания;
				3.1.4.2) Если нет => возвращаем значение метода (3);
		3.2) Если пересечения есть => возвращаем значение метода (3);

* Метод сдвига интервала: (2)
	1) Получаем интервал и значение сдвига;
	2) Увеличиваем значение начального и конечного момента на переданное значение;
	3) Возвращаем новый интервал;
* Метод регистрации ВС:
	

==============================================================================

ВПП: (зона с последовательным доступом):

Данные:
* Id;
* интервалы занимания ВПП: (есть от ЗПД);

Методы:
* Возвращающий минимальное время ожидания на ПРСТ (которое можно отработать с неработающими двигателями): (ИНТЕРФЕЙС) (И.1)
	К нам обращается ВС и передает момент его выхода на исполнительный старт (момент занимания ВПП) и момент взлета (момент освобождения ВПП). Проверяем пересечение полученного интервала с записанными в ВПП интервалами (метод (2) ЗПД). Если пересечений нет => возвращаем ноль. Если есть => возвращаем значение метода выделения интервала в конце списка;


===============================================================================

Зона с последовательным доступом (ЗПД): 

Данные:
1) интервалы занимания зоны:
	Словарь, где ключ — начальный момент, значение — конечный момент;

Методы:
* Определяющий пересечение интервалов: (2)
	1) Создаем интервал обратившегося судна из переданных им данных;
	2) Вызываем метод (1), передаем ему созданный интервал. Получаем начальные моменты левого и правого интервала;
	3) Если начальный момент текущего интервала меньше конечного момента левого интервала => пересечение;
	4) Если конечный момент текущего интервала больше начального момента правого интервала => пересечение;
	5) Если ни то и ни другое => нет пересечения;

* Метод, находящий ближайшие моменты прибытия слева и справа относительно момента прибытия обратившегося судна: (1)
	1) Получаем интервал обратившегося судна; 
	2) Локально получаем список ключей словаря из полей класса;
	3) Добавляем в список начальный момент полученного интервала;
	4) Сортируем список;
	5) Получаем начальные моменты (по сути ключи словаря) левого и правого интервала;
	6) Взвращаем эти моменты;

* Добавление нового интервала занимания: (3)
	1) Получаем интервал;
	2) Добавляем в словарь;

* Удаление интервала занимания: (4)
	1) Получаем интервал;
	2) Удаляем интервал по ключу (начальному моменту переданного интервала);


===============================================================================

Генератор ВС:

Данные:


Методы:
* Метод создания {Взлетающего ВС}: (ИНТЕРФЕЙС) (И.1)
	1) Вызываем метод (1);
	2) Создаем {Взлетающее ВС};
	3) Возвращаем;

* Метод создания {Садящегося ВС}: (ИНТЕРФЕЙС) (И.2)
	1) Вызываем метод (2)
	2) Создаем {Садящееся ВС};
	3) Возвращаем;

* Метод, возвращающий исходныы данныы для создания {Взлетающего ВС}: (1)
	1) Получаем (из файла, записью напрямую или еще как) данные для создания взлетающего ВС;
* Метод, возвращающий исходныы данныы для создания {Садящегося ВС}; (2)
	1) Получаем (из файла, записью напрямую или еще как) данные для создания садящегося ВС;


===============================================================================

Неявная общая сущность: 

Данные:
* Таймер для {Взлетающих ВС}; (2)
* Таймер для {Садящихся ВС}; (1)
* Генератор ВС;
* ВП полосы;
* Спец площадки;

Методы:
* Обработка таймера (1):
	1) Вызываем метод {Генератора} и передаем ссылку на ВПП (И.2);
	2) Возвращаем ВС;

* Обработка таймера (2):
	1) Вызываем метод {Генератора} и передаем ссылки на ВПП и Спец площадки (И.1);
	2) Возвращаем ВС;	

* Регистрация {ВС} на {ВПП}: (3)
	1) Получаем ВС;
	2) Получаем интервал занимания ВПП текущим судном через метод ВС И.2;
	3) Добавляем интервал занимания ВПП через метод (3) ЗПД;

* Регистрация {Взлетающего ВС} на {Спец площадке}: (4)
	1) Получаем взлетающее ВС;
	2) Получаем интервал занимания Спец площадки текущим судном через метод ВС И.3;
	3) Добавляем интервал занимания Спец площадки через метод (3) ЗПД;

============================================================================

Таблица:

Данные:
* TableLayoutPanel как графическая основа;
* Двумерный массив как хранилище значений;

Методы:
* Добавление строки;
* Удаление строки;
* Вставка строки;
* Изменение значения ячейки;
* Расчет индекса контрола в коллекции контролов tableLayoutPanel;


============================================================================

Класс-контроллер реализуемости планового момента выхода:

Синглтон. 

Данные:
* 

Методы:
* Метод проверки реализуемости без ПОО;
* Метод проверки реализуемости с ПОО;





Алгоритм рассчета индекса контрола в коллекции контролов tableLayoutPanel:
1) определяем, с какого последовательного индекса начинается данная строка = длина строки * индекс строки;
2) прибавляем к полученному начальному индексу индекс столбца;