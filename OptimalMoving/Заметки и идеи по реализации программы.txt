Проектирование:
* Выделить метод считывания исходных данных (при изменении формата исходных данных нужно будет менять только один метод);
* 



// ! — элемент нужно задать при создании объекта

Основные сущности: 
* ВС; +
* Спец площадка; +
* ВПП; +
* Контроллер реализуемости планового момента выхода; +
* Генератор ВС;
* Момент ВС; +
* Интервал ВС; +
* Перечисление типов моментов; +
* Перечисление типов интервалов; +
* Момент; +
* Интервал; +
* Элементы GUI: таблица (пока что таблица, дальше видно будет); +
* Не явная общая сущность (что-то вроде организующего всю работу класса); 

Содержание сущностей:

ВС: ========================================================================

Данные:
* Моменты;
* Интервалы; 
* Флаг необходимости обработки; !
* максимум ожидания обработки; !
* константный интервал для безопасного слияния; !
* максимум ожидания на предварительном старте; !

Методы:
* Рассчет момента прихода на ПРСТ;
* Анализ выхода на исполнительный старт:
	Мы объединили два варианта развития событий в один алгоритм, который возвращает минимальный интервал ожидания (если ВПП будет свободно => интервал = 0). 
* Рассчет момента выхода на исполнительный старт(?)(по-идее это не нужно, так как все рассчитывается в ВПП по передаваемым данным);
* Рассчет момента взлета (покидания ВПП)(?)(та же причина);
(Связь с площадкой)
* Рассчет суммарного ожидания на стоянке (по-идее можно включить и ожидание на ПРСТ);


=================================================================================

Перечисление типов моментов:

Типы:
* появление; !
* плановое прибытие на предварительный старт; !
* отправление (запуск двигателей);
* прибытие на предварительный старт;
* прибытие на исполнительный старт;
* покидание ВПП (взлет);


=================================================================================

Перечисление типов интервалов:

Типы:
* движение от стоянки на предварительный старт; ! (мб не задано)
* движение от стоянки до спец площадки; !
* ожидание обработки; 
* ожидание безопасного слияния;
* обработка; !
* движение от площадки к предварительному старту; !
* ожидание на предварительном старте; 
* руление на исполнительный старт; !
* взлет; !


=================================================================================

Момент:
Данные:
* тип;
* временное значение, мс;


=================================================================================

Интервал:
Данные:
* тип;
* начальный момент;
* конечный момент;

Методы:
* Получить значение интервала между своими моментами;


=================================================================================

Спец площадка: (зона с последовательным доступом)

Данные:
* моменты занимания площадки (когда площадки станет занята);
* моменты освобождения площадки;

Методы:
* Метод расчета интервала между начальными точками интервалов;
* Метод расчета интервала для безопасного слияния:
	Получаем два интервала. Проверяем, есть ли между их начальными точками интервал для безопасного слияния:
		Если есть => возвращаем ноль;
		Если нет => возвращаем интервал для безопасного слияния = константное значение
		интервала для безопасного слияния - рассчитанное раньше значение интервала между
		начальными точками;
* Метод выделения интервала в конце списка (в Спец площадку записываем инетрвалы, сформированные моментами прибытия и покидания):
	Возвращаем интервал ожидания = разности момента покидания площадки последним 
	записанным судном и момента прибытия (без задержки) обратившегося судна и интервал для безопасного слияния = возврату метода расчета интервала между начальными точками интервалов;
* Метод, находящий ближайшие моменты прибытия слева и справа относительно момента прибытия текущего судна;
* Метод, возвращающий возвращает задержку для ожидания обработки и для безопасного слияния (в кортеже):
	К нам обращается ВС и передает данные, необходимые для рассчета момента его прибытия на площадку (момента занимания) и момента освобождения им площадки. Проверяем пересечение полученного интервала с записанными в площадке ближайшими интервалами: 		Если пересечений нет => проверяем, есть ли между ближайшим левым и ближайшим 		правым моментом прибытия ВС заданный интервал безопасного слияния:
			Если есть => возвращаем два нуля;
			Если нет => определяем, с каким интервалом, левым или правым, идет конфликт:
				Если с правым => возвращаем значение метода выделения интервала в конце списка; 
				Если с левым => сдвигаем интервал ВС вправо на минимально необходимый интервал для разрешения конфликта. Снова проверяем наличие безопасных интервалов между моментами прибытия:
					Если есть => проверяем пересечение интервалов:
						Если есть пересечение => возвращаем значение метода выделения интервала в конце списка;
						Если нет => возвращаем интервал ожидания обработки = 0 и интервал для безопасного слияния = величине сдвига интервала вправо;
					Если нет => возвращаем значение метода выделения интервала в конце списка;
		Если пересечения есть => возвращаем значение метода выделения интервала в конце списка;
* Метод сдвига интервала;


ВПП: (зона с последовательным доступом) =======================================

Определение занятости: 1) в момент, когда взлетающее судно ушло с предварительного старта, рассчитываем момент освобождения ВПП этим судном, 2) если момент освобождения ВПП взлетающим судном раньше момента посадки садящегося судна, то разрешается взлет.

Данные:
* моменты занимания ВПП (когда ВПП станет занята);
* моменты освобождения ВПП;

Методы:
* Возвращающий минимальное время ожидания на ПРСТ (которое можно отработать с неработающими двигателями):
	К нам обращается ВС и передает данные, необходимые для рассчета момента его выхода на исполнительный старт (момента занимания) и момента взлета (момента освобождения). Проверяем пересечение полученного интервала с записанными в ВПП интервалами. Если пересечений нет => возвращаем ноль. Если есть => возвращаем значение метода выделения интервала в конце списка;
* 


===============================================================================

Генератор ВС:

Данные:
* 

Методы:
* Метод создания ВС (возвращает объект ВС);
* Метод выборки исходный данных для создания ВС;


Не явная общая сущность: ===================================================
Данные:
* 
* рандомайзер (вроде не нужен, интервал нам задают);
* таймеры (вроде бы нужны для каждой стоянки);

Методы:
* Вырабатывающий появление нового ВС (вызывается по таймеру соответствующей стоянки);
* Определяющий пересечение интервалов;
* Метод рассчета интервала между двумя моментами;

============================================================================

Таблица:
Данные:
* TableLayoutPanel как графическая основа;
* Двумерный массив как хранилище значений;

Методы:
* Добавление строки;
* Удаление строки;
* Вставка строки;
* Изменение значения ячейки;
* Расчет индекса контрола в коллекции контролов tableLayoutPanel;
* 


============================================================================

Класс-контроллер реализуемости планового момента выхода:

Синглтон. 

Данные:
* 

Методы:
* Метод проверки реализуемости без ПОО;
* Метод проверки реализуемости с ПОО;





Алгоритм рассчета индекса контрола в коллекции контролов tableLayoutPanel:
1) определяем, с какого последовательного индекса начинается данная строка = длина строки * индекс строки;
2) прибавляем к полученному начальному индексу индекс столбца;